// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cloudscribe.Core.IdentityServer.EFCore.PostgreSql;

#nullable disable

namespace cloudscribe.Core.IdentityServer.EFCore.PostgreSql.Migrations
{
    [DbContext(typeof(ConfigurationDbContext))]
    [Migration("20221025145432_cloudscribe-idserver-fix-timestamps")]
    partial class cloudscribeidserverfixtimestamps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_resources");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_csids_api_resources_site_id");

                    b.HasIndex("SiteId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_csids_api_resources_site_id_name");

                    b.ToTable("csids_api_resources", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_claims");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_csids_api_claims_api_resource_id");

                    b.ToTable("csids_api_claims", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_resource_property");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_csids_api_resource_property_api_resource_id");

                    b.ToTable("csids_api_resource_property", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean")
                        .HasColumnName("emphasize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_discovery_document");

                    b.Property<string>("SiteId")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_scopes");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_csids_api_scopes_api_resource_id");

                    b.HasIndex("SiteId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_csids_api_scopes_site_id_name");

                    b.ToTable("csids_api_scopes", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiScopeId")
                        .HasColumnType("integer")
                        .HasColumnName("api_scope_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_scope_claims");

                    b.HasIndex("ApiScopeId")
                        .HasDatabaseName("ix_csids_api_scope_claims_api_scope_id");

                    b.ToTable("csids_api_scope_claims", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_api_secrets");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_csids_api_secrets_api_resource_id");

                    b.ToTable("csids_api_secrets", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_remember_consent");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("boolean")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("boolean")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("client_uri");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("consent_lifetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("device_code_lifetime");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("boolean")
                        .HasColumnName("include_jwt_id");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("logo_uri");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("protocol_type");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("boolean")
                        .HasColumnName("require_pkce");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("site_id");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_code_type");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("user_sso_lifetime");

                    b.HasKey("Id")
                        .HasName("pk_csids_clients");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_csids_clients_site_id");

                    b.HasIndex("SiteId", "ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_csids_clients_site_id_client_id");

                    b.ToTable("csids_clients", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_claims");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_claims_client_id");

                    b.ToTable("csids_client_claims", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("origin");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_cors_origins");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_cors_origins_client_id");

                    b.ToTable("csids_client_cors_origins", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("grant_type");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_grant_types");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_grant_types_client_id");

                    b.ToTable("csids_client_grant_types", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("provider");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_id_p_restrictions");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_id_p_restrictions_client_id");

                    b.ToTable("csids_client_id_p_restrictions", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_post_logout_redirect_uris");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_post_logout_redirect_uris_client_id");

                    b.ToTable("csids_client_post_logout_redirect_uris", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_props");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_props_client_id");

                    b.ToTable("csids_client_props", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_redirect_uris");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_redirect_uris_client_id");

                    b.ToTable("csids_client_redirect_uris", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_scopes");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_scopes_client_id");

                    b.ToTable("csids_client_scopes", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_client_secrets");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_csids_client_secrets_client_id");

                    b.ToTable("csids_client_secrets", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_csids_identity_claims");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_csids_identity_claims_identity_resource_id");

                    b.ToTable("csids_identity_claims", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_discovery_document");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_csids_identity_resources");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_csids_identity_resources_site_id");

                    b.HasIndex("SiteId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_csids_identity_resources_site_id_name");

                    b.ToTable("csids_identity_resources", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_csids_identity_resource_property");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_csids_identity_resource_property_identity_resource_id");

                    b.ToTable("csids_identity_resource_property", (string)null);
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_api_claims_csids_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_api_resource_property_csids_api_resources_api_resourc");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScope", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_api_scopes_csids_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScope", "ApiScope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_api_scope_claims_csids_api_scopes_api_scope_id");

                    b.Navigation("ApiScope");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiSecret", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_api_secrets_csids_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientClaim", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_claims_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_cors_origins_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientGrantType", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_grant_types_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_id_p_restrictions_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_post_logout_redirect_uris_csids_clients_client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientProperty", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_props_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_redirect_uris_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientScope", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_scopes_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ClientSecret", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_client_secrets_csids_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityClaim", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_identity_claims_csids_identity_resources_identity_reso");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_csids_identity_resource_property_csids_identity_resources_i");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.ApiScope", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("cloudscribe.Core.IdentityServer.EFCore.Entities.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
